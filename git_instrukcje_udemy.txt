GIT 

******************
Podstawowe komendy
******************

- Do zmiany domyślnego edytora na notepad++ posłuży komenda:
git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"

- Inicjalizacja repozytorium git
git init 

- Informacja o statusie repozytorium (struktura, branch etc)
git status

Pliki wrzucone do repozytorium są na razie nieśledzone. 

- Do śledzenia plików używam komendy
git add nazwa_pliku

- Jeśli chcę cofnąć tą operację - przestać śledzić dany plik użyję komendy
git rm --cached nazwa_pliku

- Jeśli chcę śledzić wszystkie pliki znajdujące się w repozytorium użyję komendy:
git add .

- Pliki dodane za pomocą git add są już śledzone i od ich dodania będę informowany o wszelkich modyfikacjach
po użyciu komendy git status
- Jeśli uznam, że zmiana jest poprawna, ponownie muszę użyć komendy:
git add nazwa_pliku

- Zapis do repozytoriun lokalnego
git commit -m "jakaś_wiadomość"

- Po modyfikacji pliku w repozytorium lokalnym można zmiany zatwierdzić za pomocą 
git add nazwa_pliku
- Lub odrzucić za pomocą 
git restore nazwa_pliku

- Aby zobaczyć historię wprowadzanych zmian należy użyć komendy
git log

- Do zmiany maila użytkownika służy komenda
git config --global user.email "mail@gmail.com"
- Do zmiany nazwy użytkownika służy komenda
git config --global user.name "name"

- Do weryfikacji zmian służy komenda 
git diff nazwa_pliku

- Dodawania zmian nieprzygotowanych do złożenia; 
W tym przypadku zwykły commit nie zadziała, należy użyc komendy 
git commit -a -m "wiadomość"

- Parametr -a oznacza, że przed wykonaniem commita należy wykonać komendę git add .
- W zależności od tego, co chcę dodać do repo używam albo parametru -a albo używam komendy git add 

- Do podejrzenia pliku można użyć komendy
cat ./nazwa_pliku (to nie jest komenda gita)

- Po dokonaniu zmiany i użyciu komendy git add nazwa_pliku, plik jest w sekcji zmian gotowych do zapisu
- Aby zrezygnować z dodania pliku z sekcji zmian gotowych użyję komendy
git restore --staged nazwa_pliku
- Teraz aby odrzucić zmiany używam komendy 
git restore nazwa pliku

- Do cofania repozytorium do konkretnego stanu muszę znać ID commita; 
Mogę go sprawdzić w historii commitów, poprzez komendę 
git log
- Do zmiany wersji pliku do konkretnego commita (do usunięcia zmiany z konkretnego commita) służy komenda
git revert id_commita

- Do zresetowania stanu pliku do konkretnego commita służy komenda
git reset id_commita
- Po zresetowaniu pliku do stanu z któregoś commita, zmiany, które były w trakcie zostaną wrzucone do obszaru zmian 
gotowych do złożenia (czyli nadal możliwe jest przywrócenie stanu przed resetem)

- Do ignorowania plików tworzę nowy plik, w którym będę zapisywać informacje
touch .gitignore

******************
Gałęzie - wprowadzenie
******************
Rozgałęzienie oznacza odbicie od głównego pnia linii rozwoju i kontynuację pracy bez wprowadzania tam bałaganu.

Zadanie
100 klientów korzysta z aplikacji
101 klient - wymaganie odnośnie logowania za pomocą konta Google
102 klient - wymaganie odnośnie logowania za pomocą konta Microsoft

- Aby stworzyć nową gałąź używam komendy
git branch klient101

- Aby sprawdzić jakie są gałęzie użyje komendy
git branch

- Aby przejść do konkretnej gałęzi używam komendy
git checkout klient101

- Ważne gdzie wykonuje się polecenie git branch nazwa; Gałąź na której obecnie się znajduję zostaje skopiowana

- Łączenie zmian między gałęziami, używam komendy
git merge klient101

- Do usunięcia brancha używam komendę
git branch -d klient101

- W przypadku konfliktu podczas łączenia zmian między gałęziami należy poprawić linijki kodu, które są niespójne

- Jeśli chcę wymusić usunięcie brancha mimo niezmergowanych zmian użyje 
git branch -D klient101

- Zapisywanie zmian do schowka za pomoca komendy
git stash
Teraz nie będę widział wprowadzonych zmian, tak jakby został wykonany commit 
- Teraz żeby przywrócić zmiany użyję komendy
git stash apply

- Nawet jeśli usunę zmiany za pomocą komendy
git restore nazwa_pliku 
To po ponownym użyciu komendy git stash apply zmiany się pokażą, ponieważ są one zapisane w schowku

- Żeby pobrać dane ze schowka i go wyczyścić użyję komendy
git stash pop 

- Czyli jak chcę kilkukrotnie używać zmian ze schowka używam git stash apply


********************
Repozytorium zdalne
********************
Github

- Do dodania repozytorium zdalnego służy komenda
git remote add origin https://github.com/JohnTabasko/testgita.git

- Do zmiany nazwy brancha głównego służy komenda
git branch -M main

- Do wypchnięcia zmian które znajdują się w branchu do repozytorium zdalnego służy komenda
git push -u origin master
Do wykonania tego polecenia będzie potrzebna autoryzacja - podanie loginu i hasła nie zadziała, od 2021 roku 
- Do autoryzacji używa się klucza ssh
https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
- Do wygenerowania klucza służy komenda
ssh-keygen -t ed25519 -C "your_email@example.com"
lub
ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
- Po użyciu komendy skipuję opcje enterem i następnie generuje się klucz 
Po wygenerowaniu pokazana jest ścieżka gdzie jest zapisany klucz
Wygenerowany klucz następnie dodaję w githubie - klikam na swój profil -> settings -> w obszarze access SSH and GPG keys -> new ssh key-and-adding-it-to-the-ssh-agent

- Z racji że korzystam z klucza ssh należy teraz dokonać pewnej modyfikacji
- Najpierw muszę usunąć informację o repozytorium zdalnym za pomocą komendy
git remote rm origin
- I następnie za pomocą komendy dodać repozytorium zdalne z kluczem ssh
git remote add origin git@github.com:JohnTabasko/testgita.git
- Teraz tworzę nowego brancha 
git branch przypomnienie_hasla
- Następnie po wprowadzeniu zmian w pliku robię git add . i git commit -m 
- i wypycham brancha do repozytorium zdalnego
git push -u origin przypomnienie_hasla

- Na githubie powinien pojawić się teraz nowy branch

- Teraz na githubie przechodzę do zakładki pull request - tutaj można zmergować zmiany wprowadzone na jakimś branchu z innym, 
można dodać do 15 reviewerów jeśli nad projektem pracuje wiele osób

- Do pobrania zmian z repozytorium zdalnego służy komenda
git fetch origin master
- A następnie trzeba zmiany zmergować na lokalnym repozytorium
git merge
- Zamiast tego można użyć jednej komendy
git pull origin master

- Jeśli chcę pobrać zmiany dla wszystkich branchy
git pull --all

- Jeśli chcę wypchnąć zmiany dla wszystkich branchy 
git push --all

- Do pobrania repozytorium z githuba służy komenda 
git clone nazwa_repozytorium(z zakładki ssh)

***********************
Praca z TortoiseGit
***********************
Środowisko z interfejsem graficznym do wykonywania komend gita zamiast używania gitbasha


